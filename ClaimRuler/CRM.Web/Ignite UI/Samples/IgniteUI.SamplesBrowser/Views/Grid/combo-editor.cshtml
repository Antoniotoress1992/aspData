@using Infragistics.Web.Mvc
@using IgniteUI.SamplesBrowser.Models
@model IQueryable<IgniteUI.SamplesBrowser.Models.Northwind.Product>
<!DOCTYPE html>

<html>
<head>
    <title></title>

    <!-- Ignite UI Required Combined CSS Files -->
    <link href="@Url.Content("~/igniteui/css/themes/infragistics/infragistics.theme.css")" rel="stylesheet" />
    <link href="@Url.Content("~/igniteui/css/structure/infragistics.css")" rel="stylesheet" />

    <script src="@Url.Content("~/js/modernizr.min.js")"></script>
    <script src="@Url.Content("~/js/jquery.min.js")"></script>
    <script src="@Url.Content("~/js/jquery-ui.min.js")"></script>

    <!-- Ignite UI Required Combined JavaScript Files -->
    <script src="@Url.Content("~/igniteui/js/infragistics.core.js")"></script>
    <script src="@Url.Content("~/igniteui/js/infragistics.lob.js")"></script>
    <script>
        var categoriesLookup = [], categories = [];
        $(function () {
            // Categories data is fetched before the grid is created. The data will be used as a data source for the combo column.
            $.ajax({
                url: '@Url.Action("GetCategories")'
            }).success(function (data) {
                for (var i = 0; i < data.Records.length; i++) {
                    categoriesLookup[data.Records[i].ID] = data.Records[i];
                    categories.push(data.Records[i]);
                }
            });
        });
    </script>
</head>
<body>

    @(Html.Infragistics()
        .Grid(Model)
        .ID("Grid")
        .Height("500px")
        .Width("100%")
        .AutoGenerateColumns(false)
        .AutoGenerateLayouts(false)
        .RenderCheckboxes(true)
        .PrimaryKey("ID")
        .Columns(column =>
        {
            column.For(x => x.ID).HeaderText("Product ID").Hidden(true);
            column.For(x => x.ProductName).HeaderText("Product Name").Width("35%");
            column.For(x => x.CategoryID).HeaderText("Category").Width("20%").FormatterFunction("lookupCategory");
            column.For(x => x.UnitsInStock).HeaderText("Units In Stock").Width("15%");
            column.For(x => x.SupplierName).HeaderText("Supplier Name").Width("35%");
            column.For(x => x.Discontinued).HeaderText("Discontinued").Width("15%");
        })
        .DataSourceUrl(Url.Action("GetProducts"))
        .Features(feature =>
        {
            feature.Updating().EditMode(GridEditMode.Row).ColumnSettings(cs =>
            {
                cs.ColumnSetting().ColumnKey("CategoryID").Required(true).EditorType(ColumnEditorType.Combo).EditorOptions("dataSource: categories, textKey: 'CategoryName', valueKey: 'ID'");
            });
        })
        .UpdateUrl(Url.Action("ProductsSaveData"))
        .Render()
    )
    <input type="button" id="saveChanges"/>
    <script>
        $(function() {
            $("#saveChanges").igButton({
                labelText: "$$(ComboEditor_SaveChanges_Label)",
                click: function (evt, ui) {
                    $("#Grid").igGrid("saveChanges");
                }
            });
        });
        function lookupCategory(id) {
            return categoriesLookup[id].CategoryName;
        }
    </script>
</body>
</html>
